{"version":3,"sources":["C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/index.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/abstracts/persistence.cached_service.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/angular-persistence.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/constants/persistence.storage_type.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/modules/persistence.module.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/persistence.cache-impl.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/persistence.service.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.abstract_browser.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.browser_container.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.container_info.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.factory.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.immutable_memory.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.local.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.memory.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.session.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.sub_storage.js","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/$_lazy_route_resource lazy","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/app.component.html","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/app.component.ts","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/app.module.ts","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shared/dataService.ts","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shared/order.ts","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/cart.component.css","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/cart.component.html","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/cart.component.ts","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/newproduct.component.html","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/newproduct.component.ts","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/productList.component.css","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/productList.component.html","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/productList.component.ts","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/shop.component.html","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/shop.component.ts","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/environments/environment.ts","C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AACA;AACA;AACoF;AACpF,iC;;;;;;;;ACJA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,cAAc;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,8CAA8C,2BAA2B,EAAE;AAC3E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA,4DAA4D;AAC5D;AACA,CAAC;AACD,sD;;;;;;;;;;;;;;;;AChG6B;AACG;AACV;AACM;AAC5B,+C;;;;;;;;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oD;;;;;;;;;;;ACTmB;AACU;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA,iBAAiB,IAAI;AACrB;AACA;AACA,oDAAoD,WAAW;AAC/D;AACA,CAAC;AACD;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA,8C;;;;;;;;;;;;ACjCqB;AACC;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA,yCAAyC,uBAAuB;AAChE,iCAAiC,qBAAqB,EAAE;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,+BAA+B,EAAE;AACjC;AACA,mCAAmC,EAAE;AACrC;AACA;AACA,8CAA8C,6BAA6B,EAAE;AAC7E,8CAA8C,4CAA4C,EAAE;AAC5F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,kD;;;;;;;;;;;;;;ACxGmC;AACf;AACC;AACI;AACH;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,aAAa;AAC7C,uBAAuB,EAAE;AACzB;AACA;AACA,2DAA2D,+BAA+B,EAAE;AAC5F;AACA;AACA;AACA,2DAA2D,iCAAiC,EAAE;AAC9F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,8BAA8B,wGAA2B;AACzD,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA,oCAAoC,uBAAuB;AAC3D;AACA;AACA;AACA;AACA;AACA,oCAAoC,uBAAuB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,uBAAuB;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA;AACA;AACA;AACA,gCAAgC,8BAA8B;AAC9D;AACA;AACA,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,gCAAgC,8BAA8B;AAC9D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,8BAA8B,wGAA2B;AACzD,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA,gCAAgC,uBAAuB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,8BAA8B,wGAA2B;AACzD,uBAAuB,EAAE;AACzB;AACA,qCAAqC,6BAA6B,uBAAuB,EAAE,EAAE;AAC7F;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,8BAA8B,wGAA2B;AACzD,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB,uCAAuC,oBAAoB;AAC3D;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,8BAA8B,6BAA6B,EAAE;AAC7D,iCAAiC,6BAA6B;AAC9D,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB,EAAE;AAClB;AACA;AACA,gCAAgC,aAAa;AAC7C,uBAAuB,EAAE;AACzB,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA,eAAe,GAAG;AAClB;AACA;AACA;AACA,gBAAgB,EAAE;AAClB;AACA;AACA,gCAAgC,aAAa;AAC7C;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,kEAAmB;AAC5B;AACA;AACA,qDAAqD,WAAW;AAChE;AACA,CAAC;AACD;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA,cAAc;AACd;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,+C;;;;;;;;;;AC/TA;AAAA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AAC2B;AACN;AACrB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,oD;;;;;;;;AC9BA;AAAA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,eAAe,EAAE;AACjB;AACA;AACA,qD;;;;;;;;ACrFA;AAAA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,oCAAoC,yBAAyB,EAAE;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB;AACA;AACA,kD;;;;;;;;;;;;;;ACtGyB;AACF;AACU;AACT;AACF;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,eAAe,EAAE;AACjB;AACA;AACA,2C;;;;;;;;;AClEA;AAAA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,oD;;;;;;;;;ACjDA;AAAA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,yC;;;;;;;;ACzBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,eAAe,EAAE;AACjB;AACA;AACA,0C;;;;;;;;;ACzFA;AAAA;AACA;AACA,mBAAmB,sBAAsB;AACzC;AACA;AACiC;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,2C;;;;;;;;;;ACtBwB;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB;AACA;AACA,oCAAoC,mBAAmB;AACvD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,+DAA+D,uBAAuB,EAAE;AACxF;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA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","file":"main.bundle.js","sourcesContent":["/**\n * Entry point for all public APIs of the package.\n */\nexport { PersistenceService, AbstractCachedService, StorageType, PersistenceModule } from './src/angular-persistence';\n//# sourceMappingURL=index.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/index.js\n// module id = ../../../../../../node_modules/angular-persistence/index.js\n// module chunks = main","/**\n * This is a cache that also implements the <code>CanActivate</code> and <code>Resolve<T></code>\n * interfaces in angular so that it can be used as both a provider and a set of guards for Angular\n * routing.  By implementing the abstract <code>getCache<T></code> method using a cache object,\n * this abstract class can form the foundation for a service based off of the persistence framework.\n *\n * @export\n * @abstract\n * \\@class AbstraceCachedService\n * @template T - the type of value returned by this service.\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n * @abstract\n */\nexport var AbstractCachedService = (function () {\n    function AbstractCachedService() {\n    }\n    /**\n     * Returns an {Observable<T>} which will monitor changes to the\n     * cache over a period of time.  This is a hot, multi-value\n     * observable which will emit the cached value, if one exists,\n     * when the Observable is first subscribed to.  The observer will\n     * then emit a new event each time the cache changes.\n     *\n     * As this is a multi-value observer which is not expected to\n     * complete, it is the responsiblity of the subscriber to\n     * unsubscribe in order to prevent potential memory leaks.\n     *\n     *          the value in the cache changes\n     * @return {?}\n     */\n    AbstractCachedService.prototype.changes = function () {\n        return this.getCache().changes();\n    };\n    /**\n     * Returns an {Observable<T>} to a cached value if one is loaded\n     * or to the value specified by the loader that was supplied when\n     * this cache was created if it is not.\n     *\n     * This Observable is guarenteed to be a single observable which\n     * means it returns a single value before it completes.  As such\n     * you do not have to unsubscribe from this Observable.\n     *\n     *          value.\n     * @return {?}\n     */\n    AbstractCachedService.prototype.get = function () {\n        return this.getCache().get();\n    };\n    /**\n     * Manually clears the value in the cache forcing a reload.\n     *\n     * @abstract\n     * @return {?}\n     */\n    AbstractCachedService.prototype.clear = function () {\n        return this.getCache().clear();\n    };\n    /**\n     * Returns the observable to the current cached service for use in the angular Router.\n     * This is equivalent to the get method but implements the resolve interface for the\n     * Angular Router.\n     *\n     * @param {?} route\n     * @param {?} state\n     * @return {?}\n     */\n    AbstractCachedService.prototype.resolve = function (route, state) {\n        return this.get();\n    };\n    /**\n     * Returns true if the value of the cached observable is \"truthy\" and false if it is not.\n     *\n     *\n     * \\@memberOf AbstraceCachedService\n     * @param {?} route\n     * @param {?} state\n     * @return {?}\n     */\n    AbstractCachedService.prototype.canActivate = function (route, state) {\n        return this.get().map(function (val) { return val ? true : false; });\n    };\n    /**\n     * Returns a cache that this service will use to return values.  The Cache may be obtained\n     * from the PersistenceService or it may be a custom implementation should one be needed.\n     *\n     * @protected\n     * @abstract\n     * @template T\n     * @abstract\n     * @return {?}\n     */\n    AbstractCachedService.prototype.getCache = function () { };\n    return AbstractCachedService;\n}());\n//# sourceMappingURL=persistence.cached_service.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/abstracts/persistence.cached_service.js\n// module id = ../../../../../../node_modules/angular-persistence/src/abstracts/persistence.cached_service.js\n// module chunks = main","export { PersistenceService } from './services/persistence.service';\nexport { AbstractCachedService } from './abstracts/persistence.cached_service';\nexport { StorageType } from './constants/persistence.storage_type';\nexport { PersistenceModule } from './modules/persistence.module';\n//# sourceMappingURL=angular-persistence.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/angular-persistence.js\n// module id = ../../../../../../node_modules/angular-persistence/src/angular-persistence.js\n// module chunks = main","export var StorageType = {};\nStorageType.MEMORY = 0;\nStorageType.IMMUTABLE_MEMORY = 1;\nStorageType.SESSION = 2;\nStorageType.LOCAL = 3;\nStorageType[StorageType.MEMORY] = \"MEMORY\";\nStorageType[StorageType.IMMUTABLE_MEMORY] = \"IMMUTABLE_MEMORY\";\nStorageType[StorageType.SESSION] = \"SESSION\";\nStorageType[StorageType.LOCAL] = \"LOCAL\";\n//# sourceMappingURL=persistence.storage_type.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/constants/persistence.storage_type.js\n// module id = ../../../../../../node_modules/angular-persistence/src/constants/persistence.storage_type.js\n// module chunks = main","import { NgModule } from '@angular/core';\nimport { PersistenceService } from '../services/persistence.service';\n/**\n * The module for the persistence framework.  This will register the PersistenceService\n * as a provider and export it.\n *\n * @export\n * \\@class AngularPersistenceModule\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport var PersistenceModule = (function () {\n    function PersistenceModule() {\n    }\n    PersistenceModule.decorators = [\n        { type: NgModule, args: [{\n                    providers: [PersistenceService]\n                },] },\n    ];\n    /** @nocollapse */\n    PersistenceModule.ctorParameters = function () { return []; };\n    return PersistenceModule;\n}());\nfunction PersistenceModule_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PersistenceModule.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    PersistenceModule.ctorParameters;\n}\n//# sourceMappingURL=persistence.module.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/modules/persistence.module.js\n// module id = ../../../../../../node_modules/angular-persistence/src/modules/persistence.module.js\n// module chunks = main","import { Observable } from 'rxjs';\nimport { StorageType } from '../constants/persistence.storage_type';\n/**\n * Internal class which is an implementation of the ICache interface. This is\n * intended to be a private class for framework use only and will not be\n * exported by the libraries modules.\n *\n * @export\n * \\@class CacheImpl\n * @template T the type of value being cached\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport var CacheImpl = (function () {\n    /**\n     * Creates an instance of CacheImpl.\n     * @param {?} key\n     * @param {?} _loader\n     * @param {?} service\n     * @param {?=} config\n     */\n    function CacheImpl(key, _loader, service, config) {\n        var _this = this;\n        if (config === void 0) { config = {}; }\n        this._loader = _loader;\n        var type = config.type || StorageType.MEMORY;\n        // For safety sake, ensure that oneUse is not present in configuration\n        service.defineProperty(this, \"_value\", key, config);\n        this._changes = service.changes({ key: key, type: type })\n            .map(function (def) { return _this._value; })\n            .publishBehavior(this._value)\n            .refCount();\n    }\n    /**\n     * Returns an observable to a cached value if one is loaded or\n     * to the value specified by the loader that was supplied when\n     * this cache was created if it is not.\n     *\n     *         single value when it's available before marking the stream\n     *         as complete.\n     * @return {?}\n     */\n    CacheImpl.prototype.get = function () {\n        var _this = this;\n        var /** @type {?} */ result = this._value;\n        if (result === undefined) {\n            /*\n             * smo - if we do not have a result, then we might still have an observable from\n             * a previous call loaded in memory cache.\n             */\n            var /** @type {?} */ observable = this._cachedObservable;\n            if (observable === undefined) {\n                var /** @type {?} */ loaded = this._loader();\n                if (loaded && loaded instanceof Observable) {\n                    var /** @type {?} */ newObservable = ((loaded))\n                        .publishLast()\n                        .refCount()\n                        .do(function (value) { return _this._value = value; })\n                        .do(function (value) { return _this._cachedObservable = undefined; });\n                    // cache the observable before publishing\n                    this._cachedObservable = newObservable;\n                    return newObservable;\n                }\n                else {\n                    // static values simply get assigned immedietly\n                    result = (loaded);\n                    this._value = result;\n                }\n            }\n            else {\n                return observable;\n            }\n        }\n        // We have a real value so we need to make an observable that returns said value\n        return Observable.of(result);\n    };\n    /**\n     * A hot observable returning changes over time.\n     *\n     * @return {?}\n     */\n    CacheImpl.prototype.changes = function () {\n        return this._changes;\n    };\n    /**\n     * Clears the cached value forcing a reload.\n     * @return {?}\n     */\n    CacheImpl.prototype.clear = function () {\n        this._value = undefined;\n    };\n    return CacheImpl;\n}());\nfunction CacheImpl_tsickle_Closure_declarations() {\n    /** @type {?} */\n    CacheImpl.prototype._value;\n    /** @type {?} */\n    CacheImpl.prototype._cachedObservable;\n    /** @type {?} */\n    CacheImpl.prototype._changes;\n    /** @type {?} */\n    CacheImpl.prototype._loader;\n}\n//# sourceMappingURL=persistence.cache-impl.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/persistence.cache-impl.js\n// module id = ../../../../../../node_modules/angular-persistence/src/services/persistence.cache-impl.js\n// module chunks = main","import { Injectable, EventEmitter } from '@angular/core';\nimport { CacheImpl } from './persistence.cache-impl';\nimport { SubStorage } from './storage/storage.sub_storage';\nimport { StorageFactory } from './storage/storage.factory';\nimport { StorageType } from '../constants/persistence.storage_type';\n/**\n * Service used to persist application wide storage.  Iterms may be obtained from the Service\n * itself or used through proxies.  This framework also supports an immutable flag which will\n * instruct the service that the objects stored within should not have any side-effects when\n * objects on the outside are changed.\n *\n * Note on immutability: Only clonable objects will be saved when the immutable flag is\n * set.  This framework will do a deep clone of the objects in question, but items such\n * as functions will not be preserved.  Also, immutability is slower.  If you have objects\n * that are well controlled with a single component, it is suggested that you don't save your\n * item as immutable.\n *\n * @export\n * \\@class PersistenceService\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport var PersistenceService = (function () {\n    function PersistenceService() {\n        this._emitter = new EventEmitter();\n        this._storage = StorageFactory.getStorage();\n    }\n    /**\n     * Returns a hot observable that can be used to monitor changes to this framework over\n     * time.  Subscribing to this observable has the potential of causing memory leaks,\n     * so each subscriber is expected to unsubscribe when notifications are no longer\n     * needed.\n     *\n     *                                  results.  If not provided, all changes will be\n     *                                  returned.\n     *\n     *                                  to this framework over time.\n     * @param {?=} config\n     * @return {?}\n     */\n    PersistenceService.prototype.changes = function (config) {\n        if (config === void 0) { config = {}; }\n        var /** @type {?} */ observable = this._emitter.asObservable();\n        // apply the key filter\n        if (config.key) {\n            observable = observable.filter(function (val) { return val.key === config.key; });\n        }\n        // apply the type filter\n        if (config.type) {\n            observable = observable.filter(function (val) { return val.type === config.type; });\n        }\n        return observable;\n    };\n    /**\n     * Returns an object from storage.  If the object was stored with the immutable flag\n     * set, then the object returned will not have any side-effects into the stored model\n     * until it is set again.\n     *\n     * @param {?} key\n     * @param {?=} type\n     * @return {?}\n     */\n    PersistenceService.prototype.get = function (key, type) {\n        if (type === void 0) { type = StorageType.MEMORY; }\n        var /** @type {?} */ storage = this._getStorage(type);\n        var /** @type {?} */ value = storage.get(key);\n        // the value here will actually be an object with some metadata attached.  This\n        // is done to handle immutable and some other things.\n        if (value) {\n            var /** @type {?} */ currDate = Date.now();\n            // if we have a value, we need to check to see if its expired.\n            if (value.expireAfter && value.created + value.expireAfter < currDate) {\n                storage.remove(key);\n                this._emitter.emit({ key: key, type: type });\n                return undefined;\n            }\n            // handle the oneUse configuration\n            if (value.oneUse) {\n                storage.remove(key);\n                this._emitter.emit({ key: key, type: type });\n                return value.data;\n            }\n            // if maxAge then we need to update the expires tag\n            if (value.timeout) {\n                if (value.lastAccessed + value.timeout < currDate) {\n                    storage.remove(key);\n                    this._emitter.emit({ key: key, type: type });\n                    return undefined;\n                }\n                else {\n                    value.lastAccessed = currDate;\n                    storage.set(key, value);\n                }\n            }\n            return value.data;\n        }\n        return undefined;\n    };\n    /**\n     * Puts an object into storage, replacing any item that may be in there.  By default,\n     * the object is stored as-is, which means that when other areas of code get the\n     * object, they can mutate it.\n     *\n     * As immutable storage is slower, and the reconstituted logic may be\n     * missing functions or metadata, it is recommended to use this only\n     * if you need to ensure the integrity of the stored object on each set\n     * as might be the case if you make use of the \"change\" emitter.\n     *\n     * @param {?} key\n     * @param {?} value\n     * @param {?=} config\n     * @return {?}\n     */\n    PersistenceService.prototype.set = function (key, value, config) {\n        if (config === void 0) { config = {}; }\n        if (!config.type) {\n            config.type = StorageType.MEMORY;\n        }\n        if (!value === undefined) {\n            this.remove(key);\n            this._emitter.emit({ key: key, type: config.type });\n            return true;\n        }\n        var /** @type {?} */ storage = this._getStorage(config.type);\n        var /** @type {?} */ currDate = Date.now();\n        var /** @type {?} */ success = storage.set(key, {\n            data: value,\n            expireAfter: config.expireAfter,\n            timeout: config.timeout,\n            oneUse: config.oneUse ? true : false,\n            created: currDate,\n            lastAccessed: currDate\n        });\n        // happens if the info object or storage object cannot be saved.\n        // Ensure we have cleaned up.\n        if (success) {\n            // this seems kind of wierd, but if we are using an immutable \n            // storage type, we want the emitter\n            this._emitter.emit({ key: key, type: config.type });\n        }\n        else {\n            storage.remove(key);\n        }\n        return success;\n    };\n    /**\n     * Clears a value stored in the service for the given type.\n     *\n     * @param {?} key\n     * @param {?=} type\n     * @return {?}\n     */\n    PersistenceService.prototype.remove = function (key, type) {\n        if (type === void 0) { type = StorageType.MEMORY; }\n        var /** @type {?} */ storage = this._getStorage(type);\n        var /** @type {?} */ currentItem = this.get(key, type);\n        if (currentItem !== undefined) {\n            storage.remove(key);\n            this._emitter.emit({ key: key, type: type });\n        }\n        return currentItem;\n    };\n    /**\n     * Clears all stored items for a particular storage type.\n     *\n     * @param {?=} type\n     * @return {?}\n     */\n    PersistenceService.prototype.removeAll = function (type) {\n        var _this = this;\n        if (type === void 0) { type = StorageType.MEMORY; }\n        var /** @type {?} */ keys = this._getStorage(type).keys();\n        this._getStorage(type).removeAll();\n        keys.forEach(function (key) { return _this._emitter.emit({ key: key, type: type }); });\n    };\n    /**\n     * Cleans up any expired objects in the cache.\n     *\n     * @param {?=} type\n     * @return {?}\n     */\n    PersistenceService.prototype.clean = function (type) {\n        if (type === void 0) { type = StorageType.MEMORY; }\n        var /** @type {?} */ storage = this._getStorage(type);\n        var /** @type {?} */ keys = storage.keys();\n        var /** @type {?} */ currDate = Date.now();\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            var /** @type {?} */ item = storage.get(key);\n            // if we have a value, we need to check to see if its expired.\n            if (item &&\n                ((item.expireAfter && item.created + item.expireAfter < currDate ||\n                    item.timeout && item.lastAccessed + item.timeout < currDate))) {\n                this.remove(key);\n            }\n        }\n    };\n    /**\n     * Create a property on the object that is bound to this stored value.  This method\n     * requires ES5 compatibility and the property will have special rules associated\n     * with it.  The name of the property will be \"key\", and the value stored in the\n     * configured storage will be prefix + key.\n     *\n     * @template T the type of property\n     * @param {?} obj\n     * @param {?} propName\n     * @param {?} key\n     * @param {?=} config\n     * @return {?}\n     */\n    PersistenceService.prototype.defineProperty = function (obj, propName, key, config) {\n        var _this = this;\n        if (config === void 0) { config = {}; }\n        var /** @type {?} */ type = config.type || StorageType.MEMORY;\n        Object.defineProperty(obj, propName, {\n            enumerable: true,\n            configurable: true,\n            get: function () { return _this.get(key, type); },\n            set: function (val) { _this.set(key, val, config); }\n        });\n    };\n    /**\n     * Returns a facade that makes things a bit easier when interacting with the service.\n     * The facade will use the prefix in order to isolate they keystore.  If no prefix is\n     * defined, the keystore will be mapped as usual with the keys working as-is in the\n     * storage.\n     *\n     * @param {?} namespace\n     * @param {?=} config the config for the facade\n     * @return {?} a PersistenceFacade object representing this store\n     */\n    PersistenceService.prototype.createContainer = function (namespace, config) {\n        if (config === void 0) { config = {}; }\n        var /** @type {?} */ thisService = this;\n        var /** @type {?} */ myConfig = {\n            oneUse: config.oneUse,\n            expireAfter: config.expireAfter,\n            timeout: config.timeout,\n            type: config.type || StorageType.MEMORY\n        };\n        // Return a substorage of the service so the full config can be used.\n        return new SubStorage(namespace, {\n            get: function (key) {\n                return thisService.get(key, myConfig.type);\n            },\n            set: function (key, value) {\n                return thisService.set(key, value, myConfig);\n            },\n            remove: function (key) {\n                return thisService.remove(key, myConfig.type);\n            },\n            removeAll: function () {\n                return thisService.removeAll();\n            }\n        }, true);\n    };\n    /**\n     * Returns a cache proxy that makes interacting with this service a little bit easier.  The\n     * proxy returned will have a set key, a generic loader, and a consistent set of config\n     * parameters. Please note that the \"expires\" property of the config might have unforseen\n     * side-effects to the cache in that if the expires setting is already passed, the cache will\n     * no longer cache values until a new proxy is created.\n     *\n     * @param {?} key    they key for the item in the persistence layer\n     * @param {?} loader the function to load the intiial value.  Must return either a value or\n     *               an Observable of that value.  If an observable is returned, it will be\n     *               converted into a single by this method and returned to the subscriber.\n     * @param {?=} config optional config object used to \"set\" the value if it has not already\n     *               been loaded.  If a \"type\" is not specified, memory storage will be\n     *               used.\n     *\n     * @return {?} a CacheProxy that can be used to interact with this cache.\n     */\n    PersistenceService.prototype.createCache = function (key, loader, config) {\n        if (config === void 0) { config = {}; }\n        // for safety ensure that oneUse is not present.  It shouldn't be, but sometimes\n        // typescript doesn't always catch errors\n        var /** @type {?} */ myConfig = {\n            type: config.type || StorageType.MEMORY,\n            expireAfter: config.expireAfter,\n            timeout: config.timeout\n        };\n        return new CacheImpl(key, loader, this, myConfig);\n    };\n    /**\n     * @param {?} type\n     * @return {?}\n     */\n    PersistenceService.prototype._getStorage = function (type) {\n        return this._storage.of(type);\n    };\n    /**\n     * @param {?} maxAge\n     * @return {?}\n     */\n    PersistenceService.prototype._calculateExpires = function (maxAge) {\n        return maxAge ? Date.now() + maxAge : undefined;\n    };\n    PersistenceService.decorators = [\n        { type: Injectable },\n    ];\n    /** @nocollapse */\n    PersistenceService.ctorParameters = function () { return []; };\n    return PersistenceService;\n}());\nfunction PersistenceService_tsickle_Closure_declarations() {\n    /** @type {?} */\n    PersistenceService.decorators;\n    /**\n     * @nocollapse\n     * @type {?}\n     */\n    PersistenceService.ctorParameters;\n    /** @type {?} */\n    PersistenceService.prototype._emitter;\n    /** @type {?} */\n    PersistenceService.prototype._storage;\n}\n//# sourceMappingURL=persistence.service.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/persistence.service.js\n// module id = ../../../../../../node_modules/angular-persistence/src/services/persistence.service.js\n// module chunks = main","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { BrowserContainer } from './storage.browser_container';\nimport { SubStorage } from './storage.sub_storage';\nvar /** @type {?} */ PREFIX = 'ANGULAR_PERSISTENCE_STORAGE';\n/**\n * An insternal class which implements the IStorage interface using the SubStorage implementation\n * object and it's implementation of the info object.\n *\n * @export\n * @abstract\n * \\@class AbstractBrowserStorage\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n * @abstract\n */\nexport var AbstractBrowserStorage = (function (_super) {\n    __extends(AbstractBrowserStorage, _super);\n    /**\n     * @param {?} storage\n     */\n    function AbstractBrowserStorage(storage) {\n        _super.call(this, PREFIX, new BrowserContainer(storage), (storage) ? true : false);\n    }\n    return AbstractBrowserStorage;\n}(SubStorage));\n//# sourceMappingURL=storage.abstract_browser.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.abstract_browser.js\n// module id = ../../../../../../node_modules/angular-persistence/src/services/storage/storage.abstract_browser.js\n// module chunks = main","var /** @type {?} */ NULL_VALUE = '_____NULL_VALUE_____';\n/**\n * This is a container that wraps a browser storage object.\n *\n * @export\n * \\@class BrowserContainer\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport var BrowserContainer = (function () {\n    /**\n     * Creates an instance of BrowserContainer.\n     * @param {?} _storage\n     */\n    function BrowserContainer(_storage) {\n        this._storage = _storage;\n    }\n    /**\n     * Sets a value on the browser storage\n     *\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    BrowserContainer.prototype.set = function (key, value) {\n        try {\n            if (value === null) {\n                value = NULL_VALUE;\n            }\n            if (value === undefined) {\n                this._storage.removeItem(key);\n            }\n            else {\n                this._storage.setItem(key, JSON.stringify(value));\n            }\n        }\n        catch (error) {\n            return false;\n        }\n        return true;\n    };\n    /**\n     * Gets a value from browser storage\n     *\n     * @param {?} key\n     * @return {?}\n     */\n    BrowserContainer.prototype.get = function (key) {\n        var /** @type {?} */ strval = this._storage.getItem(key);\n        if (strval === null) {\n            return undefined;\n        }\n        var /** @type {?} */ value = JSON.parse(strval);\n        if (value === NULL_VALUE) {\n            return null;\n        }\n        return value;\n    };\n    /**\n     * Removes a value from browser storage\n     *\n     * @param {?} key\n     * @return {?}\n     */\n    BrowserContainer.prototype.remove = function (key) {\n        var /** @type {?} */ curVal = this.get(key);\n        if (curVal !== undefined) {\n            this._storage.removeItem(key);\n        }\n        return curVal;\n    };\n    /**\n     * Removes all values from browser storage\n     * @return {?}\n     */\n    BrowserContainer.prototype.removeAll = function () {\n        this._storage.clear();\n    };\n    return BrowserContainer;\n}());\nfunction BrowserContainer_tsickle_Closure_declarations() {\n    /** @type {?} */\n    BrowserContainer.prototype._storage;\n}\n//# sourceMappingURL=storage.browser_container.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.browser_container.js\n// module id = ../../../../../../node_modules/angular-persistence/src/services/storage/storage.browser_container.js\n// module chunks = main","var /** @type {?} */ INFO_KEY = '__INFO';\n/**\n * An internal object used to track items saved by a storage object within the persistence\n * framework.\n *\n * @export\n * \\@class ContainerInfo\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport var ContainerInfo = (function () {\n    /**\n     * @param {?} _namespace\n     * @param {?} _container\n     */\n    function ContainerInfo(_namespace, _container) {\n        this._namespace = _namespace;\n        this._container = _container;\n        var infoObj = _container.get(this._namespace);\n        // If we have an existing object, check its type\n        if (infoObj) {\n            if (typeof infoObj !== 'object' || !infoObj[INFO_KEY]) {\n                throw new Error('Potential attribute conflict detected');\n            }\n        }\n    }\n    /**\n     * Adds a key to this info object.\n     *\n     * @param {?} key\n     * @return {?}\n     */\n    ContainerInfo.prototype.addAttribute = function (key) {\n        var /** @type {?} */ item = this._getInfo();\n        item[key] = true;\n        this._setInfo(item);\n    };\n    /**\n     * Removes a key from this info object.\n     *\n     * @param {?} key\n     * @return {?}\n     */\n    ContainerInfo.prototype.removeAttribute = function (key) {\n        var /** @type {?} */ info = this._getInfo();\n        delete info[key];\n        this._setInfo(info);\n    };\n    /**\n     * Returns a list of keys that have been added to this\n     * info object.\n     *\n     * @return {?}\n     */\n    ContainerInfo.prototype.getAttributes = function () {\n        return Object.keys(this._getInfo())\n            .filter(function (key) { return key !== INFO_KEY; });\n    };\n    /**\n     * Checks to see if the value stored in the _namespace\n     * is an info object or if it is empty.  If it is NOT\n     * an info object, then false is returned.\n     *\n     * @return {?}\n     */\n    ContainerInfo.prototype.available = function () {\n        var /** @type {?} */ infoObj = this._container.get(this._namespace);\n        return !infoObj || (typeof infoObj === 'object' && infoObj[INFO_KEY]);\n    };\n    /**\n     * @return {?}\n     */\n    ContainerInfo.prototype._getInfo = function () {\n        var /** @type {?} */ obj = this._container.get(this._namespace);\n        if (!obj) {\n            obj = {};\n            obj[INFO_KEY] = true;\n        }\n        return obj;\n    };\n    /**\n     * @param {?} info\n     * @return {?}\n     */\n    ContainerInfo.prototype._setInfo = function (info) {\n        // this is 1 because the info identifier will be there.\n        if (Object.keys(info).length <= 1) {\n            this._container.remove(this._namespace);\n        }\n        else {\n            this._container.set(this._namespace, info);\n        }\n    };\n    return ContainerInfo;\n}());\nfunction ContainerInfo_tsickle_Closure_declarations() {\n    /** @type {?} */\n    ContainerInfo.prototype._namespace;\n    /** @type {?} */\n    ContainerInfo.prototype._container;\n}\n//# sourceMappingURL=storage.container_info.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.container_info.js\n// module id = ../../../../../../node_modules/angular-persistence/src/services/storage/storage.container_info.js\n// module chunks = main","import { SessionStorage } from './storage.session';\nimport { LocalStorage } from './storage.local';\nimport { ImmutableMemoryStorage } from './storage.immutable_memory';\nimport { MemoryStorage } from './storage.memory';\nimport { StorageType } from '../../constants/persistence.storage_type';\n/**\n * A factory used to retrieve Storage objects\n *\n * @export\n * \\@class StorageFactory\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport var StorageFactory = (function () {\n    function StorageFactory() {\n        this._storages = [];\n    }\n    /**\n     * Returns a new instance of the storage factory.\n     *\n     * \\@static\n     * @return {?}\n     */\n    StorageFactory.getStorage = function () {\n        return new StorageFactory();\n    };\n    /**\n     * Returns a singleton object of a specified type.  Storage\n     * types are initialized lazily.\n     *\n     * @param {?} type\n     * @return {?}\n     */\n    StorageFactory.prototype.of = function (type) {\n        var /** @type {?} */ storage = this._storages[type];\n        if (!storage) {\n            switch (type) {\n                case StorageType.MEMORY:\n                    storage = new MemoryStorage();\n                    this._storages[type] = storage;\n                    break;\n                case StorageType.IMMUTABLE_MEMORY:\n                    storage = new ImmutableMemoryStorage();\n                    break;\n                case StorageType.LOCAL:\n                    storage = new LocalStorage();\n                    break;\n                case StorageType.SESSION:\n                    storage = new SessionStorage();\n                    break;\n                default:\n            }\n            if (!storage || !storage.available()) {\n                throw new Error('Storage type not available');\n            }\n            this._storages[type] = storage;\n        }\n        return storage;\n    };\n    return StorageFactory;\n}());\nfunction StorageFactory_tsickle_Closure_declarations() {\n    /** @type {?} */\n    StorageFactory.prototype._storages;\n}\n//# sourceMappingURL=storage.factory.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.factory.js\n// module id = ../../../../../../node_modules/angular-persistence/src/services/storage/storage.factory.js\n// module chunks = main","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { MemoryStorage } from './storage.memory';\n/**\n * Storage type for immutable memory\n *\n * @export\n * \\@class ImmutableMemoryStorage\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport var ImmutableMemoryStorage = (function (_super) {\n    __extends(ImmutableMemoryStorage, _super);\n    function ImmutableMemoryStorage() {\n        _super.apply(this, arguments);\n    }\n    /**\n     * Sets a value in memory storage after stringifying the object.  This\n     * add some overhead but ensures each copy of the object is immutable.\n     *\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    ImmutableMemoryStorage.prototype.set = function (key, value) {\n        if (value !== undefined) {\n            value = JSON.stringify(value);\n        }\n        return _super.prototype.set.call(this, key, value);\n    };\n    /**\n     * Returns an immutable value for the specified key.\n     *\n     * @param {?} key\n     * @return {?}\n     */\n    ImmutableMemoryStorage.prototype.get = function (key) {\n        var /** @type {?} */ value = _super.prototype.get.call(this, key);\n        if (value !== undefined) {\n            return JSON.parse(value);\n        }\n        return undefined;\n    };\n    return ImmutableMemoryStorage;\n}(MemoryStorage));\n//# sourceMappingURL=storage.immutable_memory.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.immutable_memory.js\n// module id = ../../../../../../node_modules/angular-persistence/src/services/storage/storage.immutable_memory.js\n// module chunks = main","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { AbstractBrowserStorage } from './storage.abstract_browser';\n/**\n * A storage object using local storage for persistence\n *\n * @export\n * \\@class LocalStorage\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport var LocalStorage = (function (_super) {\n    __extends(LocalStorage, _super);\n    /**\n     * Creates an instance of LocalStorage.\n     */\n    function LocalStorage() {\n        _super.call(this, localStorage);\n    }\n    return LocalStorage;\n}(AbstractBrowserStorage));\n//# sourceMappingURL=storage.local.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.local.js\n// module id = ../../../../../../node_modules/angular-persistence/src/services/storage/storage.local.js\n// module chunks = main","/**\n * A storage type which stored values in memory.  They are assumed to be mutable, but\n * any object will work in this storage type.\n *\n * @export\n * \\@class MemoryStorage\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport var MemoryStorage = (function () {\n    function MemoryStorage() {\n        this._data = {};\n    }\n    /**\n     * Always returns true\n     *\n     * @return {?}\n     */\n    MemoryStorage.prototype.available = function () {\n        return true;\n    };\n    /**\n     * Sets a value in this object for the specified key\n     *\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    MemoryStorage.prototype.set = function (key, value) {\n        if (value === undefined) {\n            delete this._data[key];\n        }\n        else {\n            this._data[key] = value;\n        }\n        return true;\n    };\n    /**\n     * Returns the value of the specified key\n     *\n     * @param {?} key\n     * @return {?}\n     */\n    MemoryStorage.prototype.get = function (key) {\n        return this._data[key];\n    };\n    /**\n     * Returns false if the value for the key is undefined.\n     *\n     * @param {?} key\n     * @return {?}\n     */\n    MemoryStorage.prototype.exists = function (key) {\n        return this._data[key] !== undefined;\n    };\n    /**\n     * Removes a value from this object\n     *\n     * @param {?} key\n     * @return {?}\n     */\n    MemoryStorage.prototype.remove = function (key) {\n        delete this._data[key];\n    };\n    /**\n     * Removes all values in this storage type.\n     *\n     * @return {?}\n     */\n    MemoryStorage.prototype.removeAll = function () {\n        var /** @type {?} */ keys = Object.keys(this._data);\n        this._data = {};\n        return keys;\n    };\n    /**\n     * Returns a list of all keys that are stored\n     *\n     * @return {?}\n     */\n    MemoryStorage.prototype.keys = function () {\n        return Object.keys(this._data);\n    };\n    return MemoryStorage;\n}());\nfunction MemoryStorage_tsickle_Closure_declarations() {\n    /** @type {?} */\n    MemoryStorage.prototype._data;\n}\n//# sourceMappingURL=storage.memory.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.memory.js\n// module id = ../../../../../../node_modules/angular-persistence/src/services/storage/storage.memory.js\n// module chunks = main","var __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nimport { AbstractBrowserStorage } from './storage.abstract_browser';\n/**\n * Storage object which saves information to the browser session storage.\n *\n * @export\n * \\@class SessionStorage\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport var SessionStorage = (function (_super) {\n    __extends(SessionStorage, _super);\n    function SessionStorage() {\n        _super.call(this, sessionStorage);\n    }\n    return SessionStorage;\n}(AbstractBrowserStorage));\n//# sourceMappingURL=storage.session.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.session.js\n// module id = ../../../../../../node_modules/angular-persistence/src/services/storage/storage.session.js\n// module chunks = main","import { ContainerInfo } from './storage.container_info';\n/**\n * This is an internal implementation of a storage container.  It takes a PersistenceContainer\n * (which has a subset of the functionality) and straps on an info object to keep track of\n * items that are added to the container.  This class can be used for creating storage\n * containers within other storage containers.\n *\n * @export\n * \\@class PersistenceContainerImpl\n *\n * @author Scott O'Bryan\n * \\@since 1.0\n */\nexport var SubStorage = (function () {\n    /**\n     * Creates an instance of SubStorage.\n     * @param {?} _namespace\n     * @param {?} _root\n     * @param {?=} _available\n     */\n    function SubStorage(_namespace, _root, _available) {\n        if (_available === void 0) { _available = true; }\n        this._namespace = _namespace;\n        this._root = _root;\n        this._available = _available;\n        this._info = new ContainerInfo(_namespace, _root);\n    }\n    /**\n     * Sets a value\n     *\n     * @param {?} key\n     * @param {?} value\n     * @return {?}\n     */\n    SubStorage.prototype.set = function (key, value) {\n        if (!this._available) {\n            return false;\n        }\n        var /** @type {?} */ val = this._root.set(this._getNamespacedKey(key), value);\n        this._info.addAttribute(key);\n        return val;\n    };\n    /**\n     * Returns a value for a given key\n     *\n     * @param {?} key\n     * @return {?}\n     */\n    SubStorage.prototype.get = function (key) {\n        if (!this._available) {\n            return undefined;\n        }\n        var /** @type {?} */ val = this._root.get(this._getNamespacedKey(key));\n        if (val === undefined) {\n            this._info.removeAttribute(key);\n        }\n        return val;\n    };\n    /**\n     * Removes a value for a given key\n     *\n     * @param {?} key\n     * @return {?}\n     */\n    SubStorage.prototype.remove = function (key) {\n        if (!this._available) {\n            return undefined;\n        }\n        this._info.removeAttribute(key);\n        return this._root.remove(this._getNamespacedKey(key));\n    };\n    /**\n     * Removes any values which have been stored using this subStorage\n     * container.\n     * @return {?}\n     */\n    SubStorage.prototype.removeAll = function () {\n        var _this = this;\n        this._info.getAttributes().forEach(function (element) { _this.remove(element); });\n    };\n    /**\n     * Returns true if the parent storage object is available and if the\n     * available flag was set durring instantiation\n     *\n     * @return {?}\n     */\n    SubStorage.prototype.available = function () {\n        return this._available && this._info.available();\n    };\n    /**\n     * Returns true if the value is not undefined\n     *\n     * @param {?} key\n     * @return {?}\n     */\n    SubStorage.prototype.exists = function (key) {\n        // This will also make sure the info object is up to date.\n        return this.get(key) !== undefined;\n    };\n    /**\n     * Returns a list of un-namespaced keys that have been returned by this object.\n     *\n     * @return {?}\n     */\n    SubStorage.prototype.keys = function () {\n        var _this = this;\n        // The exists will update the underlying storage object because\n        // it invokes a get.  Still, we have an attributes object that is\n        // not tied to the object in storage, hopefully.\n        return this._info.getAttributes().filter(function (key) {\n            return _this.exists(key);\n        });\n    };\n    /**\n     * @param {?} key\n     * @return {?}\n     */\n    SubStorage.prototype._getNamespacedKey = function (key) {\n        return this._namespace + '::' + key;\n    };\n    return SubStorage;\n}());\nfunction SubStorage_tsickle_Closure_declarations() {\n    /** @type {?} */\n    SubStorage.prototype._info;\n    /** @type {?} */\n    SubStorage.prototype._namespace;\n    /** @type {?} */\n    SubStorage.prototype._root;\n    /** @type {?} */\n    SubStorage.prototype._available;\n}\n//# sourceMappingURL=storage.sub_storage.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/node_modules/angular-persistence/src/services/storage/storage.sub_storage.js\n// module id = ../../../../../../node_modules/angular-persistence/src/services/storage/storage.sub_storage.js\n// module chunks = main","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncatched exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tthrow new Error(\"Cannot find module '\" + req + \"'.\");\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"../../../../../ClientSide/$$_lazy_route_resource lazy recursive\";\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/$$_lazy_route_resource lazy\n// module id = ../../../../../ClientSide/$$_lazy_route_resource lazy recursive\n// module chunks = main","module.exports = \"<router-outlet></router-outlet>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/app.component.html\n// module id = ../../../../../ClientSide/app/app.component.html\n// module chunks = main","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'sana-webshop',\n  templateUrl: \"./app.component.html\",\n  styles: []\n})\nexport class AppComponent {\n  title = 'Sana Webshop Assessment';\n}\n\n\n\n// WEBPACK FOOTER //\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/app.component.ts","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { HttpModule } from \"@angular/http\";\n//import { HttpClientModule } from \"@angular/common/http\";\n\nimport { AppComponent } from './app.component';\nimport { ProductList } from \"./shop/productList.component\";\nimport { Cart } from \"./shop/cart.component\";\nimport { Shop } from \"./shop/shop.component\";\nimport { NewProduct } from \"./shop/newproduct.component\";\nimport { DataService } from \"./shared/dataService\";\nimport { RouterModule } from \"@angular/router\";\nimport { FormsModule } from \"@angular/forms\";\nimport { PersistenceModule } from \"angular-persistence\";\nimport { UiSwitchModule } from 'angular2-ui-switch'\n\nlet routes = [\n    { path: \"\", component: Shop },\n    { path: \"newproduct\", component: NewProduct}\n];\n\n@NgModule({\n    declarations: [\n        AppComponent,\n        ProductList,\n        Cart,\n        Shop,\n        NewProduct\n    ],\n    imports: [\n        BrowserModule,\n        HttpModule,\n        FormsModule,\n        PersistenceModule,\n        UiSwitchModule,\n        RouterModule.forRoot(routes, {\n            useHash: true,\n            enableTracing: true\n        })\n  ],\n  providers: [\n      DataService\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n\n\n\n// WEBPACK FOOTER //\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/app.module.ts","import { Injectable } from \"@angular/core\";\r\nimport { Http, Response, Headers } from \"@angular/http\";\r\nimport { Observable } from \"rxjs\"\r\nimport 'rxjs/add/operator/map';\r\nimport { Product } from \"./product\";\r\nimport { Order, OrderItem } from \"./order\";\r\nimport { PersistenceService, StorageType } from \"angular-persistence\";\r\n//import * as orders from \"./order\";//I dont need this for this assessment i guess...\r\n\r\n@Injectable()\r\nexport class DataService {\r\n\r\n    constructor(\r\n        private http: Http,\r\n        private persistenceService: PersistenceService\r\n    ) {\r\n    }\r\n\r\n    public products: Product[] = [];\r\n    public order: Order = new Order();\r\n    public perSwitch: boolean = this.persistenceService.get('perSwitch', StorageType.LOCAL);\r\n\r\n    public loadProducts(): Observable<Product[]> {\r\n        return this.http.get(\"/api/products\")\r\n            .map((result: Response) => this.products = result.json());\r\n    }\r\n\r\n    public AddToOrder(product: Product) {\r\n        let item: OrderItem = this.order.items.find(i => i.productId == product.productId);//If products exists...\r\n\r\n        if (item) {\r\n            item.quantity++;\r\n        } else {\r\n            item = new OrderItem();\r\n            item.productId = product.productId;\r\n            item.productTitle = product.title;\r\n            item.productPrice = product.price;\r\n            item.productDescription = product.description;\r\n            item.productPicture = product.picture;\r\n            item.productCategoryId = product.categoryId;\r\n            item.unitPrice = product.price;\r\n            item.quantity = 1;\r\n            this.order.items.push(item);\r\n        }\r\n    }\r\n\r\n    public addProduct(prod) {\r\n        this.products = this.persistenceService.get('productList', StorageType.LOCAL);//Clean DB product list & load my memory storage product list\r\n        this.products.push(prod);//add my new product\r\n        this.persistenceService.set('productList', this.products , { type: StorageType.LOCAL });//Memory & 'offline' storage\r\n    }\r\n\r\n    public insertProduct(prod) {\r\n        return this.http.post(\"/api/products\", prod)\r\n            .map(response => {\r\n                let message = response.json();\r\n                return true;\r\n            });\r\n    }\r\n\r\n    public activateMemoryStorage() {\r\n        this.perSwitch = true;\r\n        this.persistenceService.set('perSwitch', true, { type: StorageType.LOCAL });//Memory & 'offline' storage\r\n    }\r\n\r\n    public deactivateMemoryStorage() {\r\n        this.perSwitch = false;\r\n        this.persistenceService.set('perSwitch', false, { type: StorageType.LOCAL });//Database storage\r\n    }\r\n\r\n    public getMemoryStorageState() {\r\n        return this.persistenceService.get('perSwitch', StorageType.LOCAL);\r\n    }\r\n\r\n    public getMemoryStorageProductList() {\r\n        return this.persistenceService.get('productList', StorageType.LOCAL);\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shared/dataService.ts","import * as _ from \"lodash\";\r\n\r\nexport class Order{\r\n    customer: OrderCustomer;\r\n    orderDate: Date = new Date();\r\n    orderNumber: string;\r\n    items: Array<OrderItem> = new Array<OrderItem>();\r\n    customerId: number;\r\n\r\n    get subtotal(): number {\r\n        return _.sum(_.map(this.items, i => i.unitPrice * i.quantity));\r\n    };\r\n}\r\n\r\nexport class OrderItem {\r\n    quantity: number;\r\n    unitPrice: number;\r\n    productId: number;\r\n    productCategoryId: number;\r\n    productPrice: number;\r\n    productTitle: string;\r\n    productDescription: string;\r\n    productPicture: string;\r\n}\r\n\r\nexport class OrderCustomer {\r\n    fullName: string;\r\n    email: string;\r\n    phoneNumber: string;\r\n    identity: string;\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shared/order.ts","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".my-cart table {\\r\\n    font-size:smaller;\\r\\n}\\r\\n\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/cart.component.css\n// module id = ../../../../../ClientSide/app/shop/cart.component.css\n// module chunks = main","module.exports = \"<div class=\\\"my-cart\\\">\\r\\n    <h5>My Sana Cart</h5>\\r\\n    <div>Subtotal: {{ data.order.subtotal | currency:\\\"COP\\\":true }}</div>\\r\\n    <div>No. Items: {{ data.order.items.length }}</div>\\r\\n    <table class=\\\"table table-condensed table-hover table-responsive\\\">\\r\\n        <thead>\\r\\n            <tr>\\r\\n                <td>Product</td>\\r\\n                <td>#</td>\\r\\n                <td>$</td>\\r\\n                <td>Total</td>\\r\\n            </tr>\\r\\n        </thead>\\r\\n        <tbody>\\r\\n            <tr *ngFor=\\\"let o of data.order.items\\\">\\r\\n                <td>{{ o.productTitle }}</td>\\r\\n                <td>{{ o.quantity }}</td>\\r\\n                <td>{{ o.unitPrice | currency:\\\"COP\\\":true }}</td>\\r\\n                <td>{{ (o.unitPrice * o.quantity) | currency:\\\"COP\\\":true }}</td>\\r\\n            </tr>\\r\\n        </tbody>\\r\\n    </table>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/cart.component.html\n// module id = ../../../../../ClientSide/app/shop/cart.component.html\n// module chunks = main","import { Component } from \"@angular/core\";\r\nimport { DataService } from \"../shared/dataService\";\r\n\r\n@Component({\r\n    selector: \"sana-cart\",\r\n    templateUrl: \"cart.component.html\",\r\n    styleUrls: [\"cart.component.css\"]\r\n})\r\nexport class Cart {\r\n    constructor(private data: DataService) {\r\n\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/cart.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n    <h4 class=\\\"\\\" style=\\\"text-align:center\\\">Add New Product</h4>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-4 col-md-offset-4\\\">\\r\\n        <div *ngIf=\\\"errorMessage\\\" class=\\\"alert alert-warning\\\">{{ errorMessage }}</div>\\r\\n        <form (submit)=\\\"onInsert()\\\" #theForm=\\\"ngForm\\\" novalidate>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"title\\\">Title</label>\\r\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" name=\\\"title\\\" [(ngModel)]=\\\"prod.title\\\" #title=\\\"ngModel\\\" required/>\\r\\n                <div class=\\\"text-danger\\\" *ngIf=\\\"title.touched && title.invalid && title.errors.required\\\">Title is required!</div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"price\\\">Price</label>\\r\\n                <input class=\\\"form-control\\\" name=\\\"price\\\" [(ngModel)]=\\\"prod.price\\\" required #price=\\\"ngModel\\\" />\\r\\n                <div class=\\\"text-danger\\\" *ngIf=\\\"price.touched && price.invalid && price.errors.required\\\">Price is required!</div>\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <label for=\\\"description\\\">Description</label>\\r\\n                <input class=\\\"form-control\\\" name=\\\"description\\\" [(ngModel)]=\\\"prod.description\\\" #description=\\\"ngModel\\\" />\\r\\n            </div>\\r\\n            <div class=\\\"form-group\\\">\\r\\n                <input type=\\\"submit\\\" class=\\\"btn btn-success\\\" value=\\\"Accept\\\" [disabled]=\\\"theForm.invalid\\\" />\\r\\n                <a routerLink=\\\"/\\\" class=\\\"btn btn-default\\\">Cancel</a>\\r\\n            </div>\\r\\n        </form>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/newproduct.component.html\n// module id = ../../../../../ClientSide/app/shop/newproduct.component.html\n// module chunks = main","import { Component } from \"@angular/core\";\r\nimport { DataService } from \"../shared/dataService\";\r\nimport { Router } from \"@angular/router\";\r\n\r\n@Component({\r\n    selector: \"new-product\",\r\n    templateUrl: \"newproduct.component.html\"\r\n})\r\nexport class NewProduct {\r\n    constructor(public data: DataService, private router: Router) {\r\n    }\r\n\r\n    errorMessage: string = \"\";\r\n\r\n    public prod = {\r\n        price: 0,\r\n        title: \"\",\r\n        description: \"\",\r\n        picture: \"sana.png\"\r\n    };\r\n\r\n    onInsert() {\r\n        if (this.data.getMemoryStorageState()) {\r\n            this.data.addProduct(this.prod);\r\n            this.router.navigate([\"/\"]);\r\n        }\r\n        else {\r\n            this.data.insertProduct(this.prod)\r\n                .subscribe(success => {\r\n                    if (success) {\r\n                        this.router.navigate([\"/\"]);\r\n                    }\r\n                }, err => this.errorMessage = \"Failed to insert product!\");\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/newproduct.component.ts","exports = module.exports = require(\"../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \".product-info {\\r\\n    height: 270px;\\r\\n}\\r\\n    .product-info img {\\r\\n        max-width: 100px;\\r\\n        max-height: 100px;\\r\\n        float: left;\\r\\n        margin: 0 2px;\\r\\n        border: solid 1px black;\\r\\n    }\\r\\n\\r\\n    .product-info .product-title {\\r\\n        font-size: large;\\r\\n        font-weight: bold;\\r\\n    }\\r\\n\\r\\n    .product-info button {\\r\\n        position: absolute;\\r\\n        bottom: 10px;\\r\\n        left: 50%;\\r\\n        margin-left: -50px;\\r\\n    }\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/productList.component.css\n// module id = ../../../../../ClientSide/app/shop/productList.component.css\n// module chunks = main","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"product-info col-md-4 well well-sm\\\" *ngFor=\\\"let p of products\\\">\\r\\n        <img src=\\\"/img/{{ p.picture }}\\\" class=\\\"img-responsive\\\" alt=\\\"{{ p.title }}\\\"/>\\r\\n        <div class=\\\"product-title\\\">{{ p.title }}</div>\\r\\n        <div><strong>Number</strong>: {{ p.productId }}</div>\\r\\n        <div><strong>Price</strong>: {{ p.price | currency:\\\"COP\\\":true }}</div>\\r\\n        <div><strong>Description</strong>: {{ p.description }}</div>\\r\\n        <button id=\\\"buyButton\\\" class=\\\"btn btn-success btn-sm pull-right\\\" (click)=\\\"addProduct(p)\\\">Add to cart!</button>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/productList.component.html\n// module id = ../../../../../ClientSide/app/shop/productList.component.html\n// module chunks = main","import { Component, OnInit } from \"@angular/core\";\r\nimport { DataService } from \"../shared/dataService\";\r\nimport { Product } from \"../shared/product\";\r\n\r\n@Component({\r\n    selector: \"product-list\",\r\n    templateUrl: \"productList.component.html\",\r\n    styleUrls: [\"productList.component.css\"]\r\n})\r\nexport class ProductList implements OnInit {\r\n    constructor(private data: DataService) {\r\n    }\r\n\r\n    public products: Product[] = [];\r\n\r\n    ngOnInit(): void {\r\n        if (this.data.getMemoryStorageState()) {\r\n            this.products = this.data.getMemoryStorageProductList();\r\n        }\r\n        else {\r\n            this.data.loadProducts()\r\n                .subscribe(success => {\r\n                    if (success) {\r\n                        this.products = this.data.products;\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    addProduct(product: Product) {\r\n        this.data.AddToOrder(product);\r\n    }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/productList.component.ts","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-lg-8\\\">\\r\\n        <product-list></product-list>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-4\\\">\\r\\n        <a routerLink=\\\"newproduct\\\" class=\\\"btn btn-info btn-block\\\">Add new product</a>\\r\\n        <div class=\\\"well well-sm\\\" style=\\\"display:block\\\">\\r\\n            <div *ngIf=\\\"errorMessage\\\" class=\\\"alert alert-warning\\\">{{ errorMessage }}</div>\\r\\n            <p>Memory storage:</p>\\r\\n            <ui-switch [(ngModel)]=\\\"msValue\\\" (click)=\\\"storageSwClicked()\\\"></ui-switch>\\r\\n        </div>\\r\\n        <div class=\\\"well well-sm\\\">\\r\\n            <sana-cart></sana-cart>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"\n\n\n//////////////////\n// WEBPACK FOOTER\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/shop.component.html\n// module id = ../../../../../ClientSide/app/shop/shop.component.html\n// module chunks = main","import { Component } from \"@angular/core\";\r\nimport { Router } from \"@angular/router\";\r\nimport { DataService } from \"../shared/dataService\";\r\nimport { UiSwitchModule } from \"angular2-ui-switch\";\r\n\r\n@Component({\r\n    selector: \"sana-shop\",\r\n    templateUrl: \"shop.component.html\"\r\n})\r\nexport class Shop {\r\n\r\n    constructor(public data: DataService, private router: Router) {\r\n    }\r\n\r\n    public msValue: boolean = this.data.perSwitch; //Persitent storage by default (I used database)\r\n    errorMessage: string = \"\";\r\n\r\n    private storageSwClicked() {\r\n        console.log(\"Switch storage value: \" + this.msValue);\r\n\r\n        if (this.msValue) {\r\n            this.data.activateMemoryStorage();\r\n            this.router.navigate([\"/\"]);\r\n        }\r\n        else {\r\n            this.data.deactivateMemoryStorage();\r\n            this.router.navigate([\"/\"]);\r\n        }\r\n    }\r\n}\n\n\n// WEBPACK FOOTER //\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/app/shop/shop.component.ts","// The file contents for the current environment will overwrite these during build.\n// The build system defaults to the dev environment which uses `environment.ts`, but if you do\n// `ng build --env=prod` then `environment.prod.ts` will be used instead.\n// The list of which env maps to which file can be found in `.angular-cli.json`.\n\nexport const environment = {\n  production: false\n};\n\n\n\n// WEBPACK FOOTER //\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/environments/environment.ts","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n\n\n// WEBPACK FOOTER //\n// C:/Courses/pluralsight/Building a Web App - ASP.NET Core MVC EF B Angular/AnaSProject/AnaSProject/ClientSide/main.ts"],"sourceRoot":"webpack:///"}